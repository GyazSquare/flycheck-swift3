OVERVIEW: Swift frontend

USAGE: swift -frontend [options] <inputs>

MODES:
  -dump-ast      Parse and type-check input file(s) and dump AST(s)
  -dump-parse    Parse input file(s) and dump AST(s)
  -dump-type-refinement-contexts
                 Type-check input file(s) and dump type refinement contexts(s)
  -emit-assembly Emit assembly file(s) (-S)
  -emit-bc       Emit LLVM BC file(s)
  -emit-ir       Emit LLVM IR file(s)
  -emit-object   Emit object file(s) (-c)
  -emit-sibgen   Emit serialized AST + raw SIL file(s)
  -emit-sib      Emit serialized AST + canonical SIL file(s)
  -emit-silgen   Emit raw SIL file(s)
  -emit-sil      Emit canonical SIL file(s)
  -parse         Parse input file(s)
  -print-ast     Parse and type-check input file(s) and pretty print AST(s)

OPTIONS:
  -application-extension Restrict code to those available for App Extensions
  -assert-config <value> Specify the assert_configuration replacement. Possible values are Debug, Release, Replacement.
  -color-diagnostics     Print diagnostics in color
  -delayed-function-body-parsing
                         Delay function body parsing until the end of all files
  -disable-objc-attr-requires-foundation-module
                         Disable requiring uses of @objc to require importing the Foundation module
  -disable-objc-interop  Disable Objective-C interop code generation and config directives
  -disable-target-os-checking
                         Disable checking the target OS of serialized modules
  -disable-testable-attr-requires-testable-module
                         Disable checking of @testable
  -D <value>             Specifies one or more build configuration options
  -embed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -embed-bitcode         Embed LLVM IR bitcode as data
  -emit-dependencies-path <path>
                         Output basic Make-compatible dependencies file to <path>
  -emit-dependencies     Emit basic Make-compatible dependencies files
  -emit-fixits-path <path>
                         Output compiler fixits as source edits to <path>
  -emit-module-doc-path <path>
                         Output module documentation file <path>
  -emit-module-doc       Emit a module documentation file based on documentation comments
  -emit-module-path <path>
                         Emit an importable module to <path>
  -emit-module           Emit an importable module
  -emit-objc-header-path <path>
                         Emit an Objective-C header file to <path>
  -emit-objc-header      Emit an Objective-C header file
  -emit-reference-dependencies-path <path>
                         Output Swift-style dependencies file to <path>
  -emit-reference-dependencies
                         Emit a Swift-style dependencies file
  -enable-objc-attr-requires-foundation-module
                         Enable requiring uses of @objc to require importing the Foundation module
  -enable-objc-interop   Enable Objective-C interop code generation and config directives
  -enable-target-os-checking
                         Enable checking the target OS of serialized modules
  -enable-testable-attr-requires-testable-module
                         Enable checking of @testable
  -filelist <value>      Specify source inputs in a file rather than on the command line
  -fixit-all             Apply all fixits from diagnostics without any filtering
  -framework <value>     Specifies a framework which should be linked against
  -F <value>             Add directory to framework search path
  -gline-tables-only     Emit minimal debug info for backtraces only
  -gnone                 Don't emit debug info
  -g                     Emit debug info
  -help                  Display available options
  -import-underlying-module
                         Implicitly imports the Objective-C half of a module
  -I <value>             Add directory to the import search path
  -L <value>             Add directory to library link search path
  -l<value>              Specifies a library which should be linked against
  -module-cache-path <value>
                         Specifies the Clang module cache path
  -module-link-name <value>
                         Library to link against when using this module
  -module-name <value>   Name of the module to build
  -nostdimport           Don't search the standard library import path for modules
  -num-threads <n>       Enable multi-threading and specify number of threads
  -Onone                 Compile without any optimization
  -Ounchecked            Compile with optimizations and remove runtime safety checks
  -output-filelist <value>
                         Specify outputs in a file rather than on the command line
  -O                     Compile with optimizations
  -o <file>              Write output to <file>
  -parse-as-library      Parse the input file(s) as libraries, not scripts
  -parse-sil             Parse the input file as SIL code, not Swift source
  -primary-file <value>  Produce output for this file, not the whole module
  -print-clang-stats     Print Clang importer statistics
  -profile-coverage-mapping
                         Generate coverage data for use with profiled execution counts
  -profile-generate      Generate instrumented code to collect execution counts
  -sdk <sdk>             Compile against <sdk>
  -serialize-debugging-options
                         Always serialize options for debugging (default: only for apps)
  -serialize-diagnostics-path <path>
                         Output serialized diagnostics to <path>
  -serialize-diagnostics Serialize diagnostics in a binary format
  -show-diagnostics-after-fatal
                         Keep emitting subsequent diagnostics after a fatal error
  -suppress-warnings     Suppress all warnings
  -target-cpu <value>    Generate code for a particular CPU variant
  -target <value>        Generate code for the given target
  -verify                Verify diagnostics against expected-{error|warning|note} annotations
  -warnings-as-errors    Treat warnings as errors
  -whole-module-optimization
                         Optimize input files together instead of individually
  -Xcc <arg>             Pass <arg> to the C/C++/Objective-C compiler
